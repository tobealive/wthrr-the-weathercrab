name: Release

on:
  push:
    tags: [v*]

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash # necessary for windows

jobs:
  lint:
    uses: ./.github/workflows/lint.yml

  build:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin # not properly signed, so there are security warnings
            os: macos-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          # - target: armv7-unknown-linux-gnueabihf
          #   os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    env:
      APP_NAME: wthrr
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install and configure dependencies
        # dependencies are only needed on ubuntu
        # as that's the only place where we build the AppImage and would make cross-compilation
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libfuse2
          sudo wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" -O /usr/local/bin/appimagetool
          sudo chmod +x /usr/local/bin/appimagetool
          cargo install cargo-appimage
          # sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          # some additional configuration for cross-compilation on linux
          # cat >>~/.cargo/config <<EOF
          # [target.aarch64-unknown-linux-gnu]
          # linker = "aarch64-linux-gnu-gcc"
          # [target.armv7-unknown-linux-gnueabihf]
          # linker = "arm-linux-gnueabihf-gcc"
          # EOF
      - name: Install rust target
        run: rustup target add "$TARGET"
      - name: Run build
        run: |
          cargo build --release --verbose --target "$TARGET"
          if [[ $RUNNER_OS == "Linux" ]]; then
            cargo appimage
          fi
      - name: Prepare artifacts
        run: |
          mkdir -p ./artifacts
          if [[ $RUNNER_OS == "Windows" ]]; then
            bin_file=$APP_NAME.exe
          else
            bin_file=$APP_NAME
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            version=$GITHUB_REF_NAME
          else
            version=$GITHUB_SHA
          fi
          if [[ $RUNNER_OS == "Linux" ]]; then
            mv ./wthrr-*-x86_64.AppImage "./artifacts/wthrr-$version-x86_64-linux.AppImage"
          fi
          # beautify release targets (remove '-unknown' / '-gnu' from filename)
          artifact=$APP_NAME-$version-$(echo "$TARGET" | sed -e 's/-unknown//' -e 's/-gnu//')
          mkdir "$artifact"
          cp README.md LICENSE "$artifact/"
          mv "./target/$TARGET/release/$bin_file" "./$artifact/$bin_file"
          # compress
          tar -czf "./artifacts/$artifact.tar.gz" "$artifact"
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: result
          path: |
            ./artifacts

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: result
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/*.tar.gz, ./artifacts/*.AppImage

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Publish
        run: cargo publish --token ${{ secrets.CRATES_TOKEN }}
